This is a code skeleton for the Assignment #3 of the Parallel Processing Systems
course. The code is fully functional as it is now, meaning you can compile and
run it without a problem. The performance of the GPU kernels are of course
bogus, since they currently do nothing. This is what you should do! :-)

Before starting filling up the necessary GPU code, do the following three things
first:

(a) Run `make help' to see what options the Makefile supports.

(b) Compile the code with `make' or `make EMU=1' for the emulation mode, if you
    are in a system without a CUDA-enabled GPU.

(c) Run `./dmv_main' to get a help message of what the program expects from
    you. Play a bit to get the feeling.

Now, you can inspect the code and get started. The code is structured in four
parts:

(a) The main program (dmv_main.cu), which is responsible for printing the
    messages you 've just seen, setting up the data structures and
    calling/measuring the performance of the kernels (CPU and GPU ones).

(b) The CPU kernels (dmv.c), which also holds all the necessary algebra stuff
    (matrix + vector operations).

(c) The GPU kernels (dmv_gpu.cu), which you must fill.

(d) Utility functions (the rest of the files), which are responsible for making
    the code readable.

The code has some `FILLME:' annotations to denote the parts where you have to
fill in some code. Of course, you can do whatever other magic you like, but use
the same timing operations, in order to have a common baseline for measuring the
performance.

Finally, have a look in the `run_dmv.sh' script before submitting jobs to the
lab's GPU machines.

For any questions, just send us in parlab@lists.cslab.ece.ntua.gr.


Revision History
================
2013-01-23: Fixed ordering of linking flags in Makefile
2013-01-16: Updated skeleton to meet requirements of the fall 2012 course.
